Test: test/AllTypes.nim
Usage:
  demo [optional-params] [args]
demo entry point with parameters of all basic types.
  Options(opt-arg sep :|=|spc):
  --help, -?                  print this help message
  -a, --aa    toggle   false  set aa
  -b=, --bb=  string   "hi"   set bb
  -c=, --cc=  string   "ho"   set cc
  -d=, --dd=  char     'X'    set dd
  -e=, --ee=  int      1      set ee
  -f=, --ff=  int8     2      set ff
  -g=, --gg=  int16    3      set gg
  -h=, --hh=  int32    4      set hh
  -i=, --ii=  int64    5      set ii
  -j=, --jj=  uint     6      set jj
  -k=, --kk=  uint8    7      set kk
  -l=, --ll=  uint16   8      set ll
  -m=, --mm=  uint32   9      set mm
  -n=, --nn=  uint64   10     set nn
  -o=, --oo=  float    11.0   set oo
  -p=, --pp=  float32  12.0   set pp
  -q=, --qq=  float    13.0   set qq
====================================
Test: test/BlockedShort.nim
Usage:
  demo [optional-params]
demo entry point with varied, meaningless parameters.  A Nim invocation
might be: demo(alpha=2, @[ "hi", "ho" ]) corresponding to the command
invocation "demo --alpha=2 hi ho" (assuming executable gets named demo).
  Options(opt-arg sep :|=|spc):
  --help, -?                 print this help message
  --alpha=    int     1      set alpha
  --abc=      float   2.0    set abc
  -a, --aaah  toggle  false  set aaah
  --aloha=    string  ""     set aloha
====================================
Test: test/CaseDistinguised.nim
Usage:
  demo [optional-params]
demo entry point with varied, meaningless parameters.  A Nim invocation
might be: demo(alpha=2, @[ "hi", "ho" ]) corresponding to the command
invocation "demo --alpha=2 hi ho" (assuming executable gets named demo).
  Options(opt-arg sep :|=|spc):
  --help, -?                    print this help message
  -z=, --alpha=  int     1      set alpha
  -A=, --Abc=    float   2.0    set Abc
  -a, --aaah     toggle  false  set aaah
  --aloha=       string  ""     set aloha
====================================
Test: test/CustomCmdName.nim
Usage:
  deeeemo [optional-params] [args]
demo entry point with varied, meaningless parameters.  A Nim invocation
might be: demo(alpha=2, @[ "hi", "ho" ]) corresponding to the command
invocation "demo --alpha=2 hi ho" (assuming executable gets named demo).
  Options(opt-arg sep :|=|spc):
  --help, -?                    print this help message
  -a=, --alpha=  int     1      set alpha
  -b=, --beta=   float   2.0    set beta
  -v, --verb     toggle  false  set verb
  -i=, --item=   string  ""     set item
====================================
Test: test/CustomType.nim
Usage:
  demo [optional-params] [args]
demo entry point with varied, meaningless parameters.  A Nim invocation
might be: demo(alpha=2, @[ "hi", "ho" ]) corresponding to the command
invocation "demo --alpha=2 hi ho" (assuming executable gets named demo).
  Options(opt-arg sep :|=|spc):
  --help, -?                      print this help message
  -a=, --alpha=  int     1        set alpha
  -v, --verb     toggle  false    set verb
  -s=, --stuff=  CSV     "ab,cd"  set stuff
====================================
Test: test/DupShort.nim
Usage:
  demo [optional-params]
demo entry point with varied, meaningless parameters.  A Nim invocation
might be: demo(alpha=2, @[ "hi", "ho" ]) corresponding to the command
invocation "demo --alpha=2 hi ho" (assuming executable gets named demo).
  Options(opt-arg sep :|=|spc):
  --help, -?                    print this help message
  -z=, --alpha=  int     1      set alpha
  -a=, --abc=    float   2.0    set abc
  --aaah         toggle  false  set aaah
  --aloha=       string  ""     set aloha
====================================
Test: test/EarlySeq.nim
Usage:
  demo [optional-params] [args]
demo entry point with varied, meaningless parameters.  A Nim invocation
might be: demo(alpha=2, @[ "hi", "ho" ]) corresponding to the command
invocation "demo --alpha=2 hi ho" (assuming executable gets named demo).
  Options(opt-arg sep :|=|spc):
  --help, -?                    print this help message
  -a=, --alpha=  int     1      set alpha
  -b=, --beta=   float   2.0    set beta
  -v, --verb     toggle  false  set verb
  -i=, --item=   string  ""     set item
====================================
Test: test/EchoResult.nim
Usage:
  editDistance [optional-params] {a:string} {b:string}
Returns the edit distance between `a` and `b`.

This uses the `Levenshtein`:idx: distance algorithm with only a linear
memory overhead.  This implementation is highly optimized!
  Options(opt-arg sep :|=|spc):
  --help, -?      print this help message
====================================
Test: test/External.nim
Usage:
  demo [optional-params] [args]
demo entry point with varied, meaningless parameters.  A Nim invocation
might be: demo(alpha=2, @[ "hi", "ho" ]) corresponding to the command
invocation "demo --alpha=2 hi ho" (assuming executable gets named demo).
  Options(opt-arg sep :|=|spc):
  --help, -?                    print this help message
  -a=, --alpha=  int     1      set alpha
  -b=, --beta=   float   2.0    set beta
  -v, --verb     toggle  false  set verb
  -i=, --item=   string  ""     set item
====================================
Test: test/FullyAutoMulti.nim
Usage:
  FullyAutoMulti {subcommand}
where {subcommand} is one of:
  demo show
Run top-level cmd with the subcmd "help" to get full help text.
Run a subcommand with --help to see only help for that.
====================================
Test: test/HelpTabCols.nim
Usage:
  demo [optional-params] [args]
demo entry point with varied, meaningless parameters.  A Nim invocation
might be: demo(alpha=2, @[ "hi", "ho" ]) corresponding to the command
invocation "demo --alpha=2 hi ho" (assuming executable gets named demo).
  Options(opt-arg sep :|=|spc):
  --help, -?     print this help message  
  -z=, --alpha=  growth constant          1
  -b=, --beta=   shrink target            2.0
  -v, --verb     set verb                 false
  -i=, --item=   set item                 ""
====================================
Test: test/ListDecl.nim
Usage:
  demo [optional-params] {alpha:float} [args]
demo entry point with varied, meaningless parameters.
  Options(opt-arg sep :|=|spc):
  --help, -?                   print this help message
  -b=, --beta=  float   1.0    set beta
  -v, --verb    toggle  false  set verb
====================================
Test: test/Mandatory.nim
Usage:
  demo [optional-params] {alpha:int} {item:string} [args]
demo entry point with varied, meaningless parameters.  A Nim invocation
might be: demo(alpha=2, @[ "hi", "ho" ]) corresponding to the command
invocation "demo --alpha=2 hi ho" (assuming executable gets named demo).
  Options(opt-arg sep :|=|spc):
  --help, -?                   print this help message
  -b=, --beta=  float   2.0    set beta
  -v, --verb    toggle  false  set verb
====================================
Test: test/MandatoryNoPos.nim
Usage:
  demo [optional-params] {alpha:int} {item:string}
demo entry point with varied, meaningless parameters.  A Nim invocation
might be: demo(alpha=2, @[ "hi", "ho" ]) corresponding to the command
invocation "demo --alpha=2 hi ho" (assuming executable gets named demo).
  Options(opt-arg sep :|=|spc):
  --help, -?                   print this help message
  -b=, --beta=  float   2.0    set beta
  -v, --verb    toggle  false  set verb
====================================
Test: test/ManualMulti.nim
Usage:
  ManualMulti demo|show [subcommand-args]

    This is a multiple-dispatch cmd.  Subcommand syntax:

    ManualMulti demo [optional-params] [files]
          This does the demo.
    
    Options:
          --help, -?                    print this help message
          -a=, --alpha=  int     1      This is a very long parameter help
                                        string which ordinarily should be
                                        auto-wrapped by alignTable into a
                                        multi-line format unless you have eagle
                                        eyes, a gigantic monitor, or maybe a
                                        little bit of both. :-)
          -b=, --beta=   float   2.0    This is more modest, but might still
                                        wrap around once or twice or so.
          -v, --verb     toggle  false  on=chatty, off=quiet. 'Nuff said.
          -i=, --item=   string  ""     set item

    ManualMulti show [optional-params] [paths]
          This shows me something.
    
    Options:
          --help, -?                    print this help message
          -g=, --gamma=  int     1      set gamma
          -i=, --iota=   float   2.0    set iota
          -v, --verb     toggle  false  set verb
====================================
Test: test/MultiFlag.nim
Usage:
  demo [optional-params] [args]
demo entry point with varied, meaningless parameters.
  Options(opt-arg sep :|=|spc):
  --help, -?                   print this help message
  -a, --alpha   toggle  false  set alpha
  -b=, --beta=  int     2      set beta
  -v, --verb    toggle  false  set verb
====================================
Test: test/NoPositional.nim
Usage:
  demo [optional-params]
demo entry point with varied, meaningless parameters.  A Nim invocation
might be: demo(alpha=2, @[ "hi", "ho" ]) corresponding to the command
invocation "demo --alpha=2 hi ho" (assuming executable gets named demo).
  Options(opt-arg sep :|=|spc):
  --help, -?                    print this help message
  -a=, --alpha=  int     1      set alpha
  -b=, --beta=   float   2.0    set beta
  -v, --verb     toggle  false  set verb
  -i=, --item=   string  ""     set item
====================================
Test: test/NoShort.nim
Usage:
  demo [optional-params]
demo entry point with varied, meaningless parameters.  A Nim invocation
might be: demo(alpha=2, @[ "hi", "ho" ]) corresponding to the command
invocation "demo --alpha=2 hi ho" (assuming executable gets named demo).
  Options(opt-arg sep :|=|spc):
  --help, -?                 print this help message
  --alpha=    int     1      set alpha
  --abc=      float   2.0    set abc
  --aaah      toggle  false  set aaah
  --aloha=    string  ""     set aloha
====================================
Test: test/PerParam.nim
Usage:
  demo [optional-params] [args]
demo entry point with varied, meaningless parameters.  A Nim invocation
might be: demo(alpha=2, @[ "hi", "ho" ]) corresponding to the command
invocation "demo --alpha=2 hi ho" (assuming executable gets named demo).
  Options(opt-arg sep :|=|spc):
  --help, -?                    print this help message
  -z=, --alpha=  int     1      growth constant
  -b=, --beta=   float   2.0    shrink target
  -v, --verb     toggle  false  set verb
  -i=, --item=   string  ""     set item
====================================
Test: test/ReturnEmpty.nim
Usage:
  demo [optional-params] [args]
demo entry point with varied, meaningless parameters.  A Nim invocation
might be: demo(alpha=2, @[ "hi", "ho" ]) corresponding to the command
invocation "demo --alpha=2 hi ho" (assuming executable gets named demo).
  Options(opt-arg sep :|=|spc):
  --help, -?                    print this help message
  -a=, --alpha=  int     1      set alpha
  -b=, --beta=   float   2.0    set beta
  -v, --verb     toggle  false  set verb
  -i=, --item=   string  ""     set item
====================================
Test: test/ReturnInt.nim
Usage:
  demo [optional-params] [args]
demo entry point with varied, meaningless parameters.  A Nim invocation
might be: demo(alpha=2, @[ "hi", "ho" ]) corresponding to the command
invocation "demo --alpha=2 hi ho" (assuming executable gets named demo).
  Options(opt-arg sep :|=|spc):
  --help, -?                    print this help message
  -a=, --alpha=  int     1      set alpha
  -b=, --beta=   float   2.0    set beta
  -v, --verb     toggle  false  set verb
  -i=, --item=   string  ""     set item
====================================
Test: test/ReturnNonInt.nim
Usage:
  demo [optional-params] [args]
demo entry point with varied, meaningless parameters.  A Nim invocation
might be: demo(alpha=2, @[ "hi", "ho" ]) corresponding to the command
invocation "demo --alpha=2 hi ho" (assuming executable gets named demo).
  Options(opt-arg sep :|=|spc):
  --help, -?                    print this help message
  -a=, --alpha=  int     1      set alpha
  -b=, --beta=   float   2.0    set beta
  -v, --verb     toggle  false  set verb
  -i=, --item=   string  ""     set item
====================================
Test: test/ReturnString.nim
Usage:
  demo [optional-params] [args]
demo entry point with varied, meaningless parameters.  A Nim invocation
might be: demo(alpha=2, @[ "hi", "ho" ]) corresponding to the command
invocation "demo --alpha=2 hi ho" (assuming executable gets named demo).
  Options(opt-arg sep :|=|spc):
  --help, -?                    print this help message
  -a=, --alpha=  int     1      set alpha
  -b=, --beta=   float   2.0    set beta
  -v, --verb     toggle  false  set verb
  -i=, --item=   string  ""     set item
====================================
Test: test/SemiAutoMulti.nim
Usage:
  multi [optional-params] [subcmd]
Run command with no parameters for a full help message.
  Options(opt-arg sep :|=|spc):
  --help, -?                print this help message
  -b=, --beta=  int     1   set beta
  -i=, --item=  string  ""  set item
====================================
Test: test/SeqInt.nim
Usage:
  demo [optional-params] [args]
demo entry point with varied, meaningless parameters.  A Nim invocation
might be: demo(alpha=2, @[ "hi", "ho" ]) corresponding to the command
invocation "demo --alpha=2 hi ho" (assuming executable gets named demo).
  Options(opt-arg sep :|=|spc):
  --help, -?                    print this help message
  -a=, --alpha=  int     1      set alpha
  -b=, --beta=   char    '\10'  set beta
  -v, --verb     toggle  false  set verb
  -i=, --item=   string  ""     set item
====================================
Test: test/TwoNondefaultedSeq.nim
TwoNondefaultedSeq.nim(21, 11) template/generic instantiation from here
/home/cb/pkg/nim/cligen/cligen.nim(95, 16) Warning: cligen only supports one seq param for positional args; using `args`, not `stuff`. [User]
Usage:
  demo [optional-params] {stuff:seq[string]} [args]
demo entry point with varied, meaningless parameters.
  Options(opt-arg sep :|=|spc):
  --help, -?                    print this help message
  -a=, --alpha=  int     1      set alpha
  -v, --verb     toggle  false  set verb
====================================
Test: test/TwoNondefaultedSeqSwap.nim
Usage:
  demo [optional-params] {args:seq[string]} [stuff]
demo entry point with varied, meaningless parameters.
  Options(opt-arg sep :|=|spc):
  --help, -?                    print this help message
  -a=, --alpha=  int     1      set alpha
  -v, --verb     toggle  false  set verb
====================================
Test: test/UserDispIdCollide.nim
Usage:
  demo [optional-params] [args]
This tests if things work when a wrapped user-proc uses identifiers also
used in our generated dispatch proc.
  Options(opt-arg sep :|=|spc):
  --help, -?                           print this help message
  -u=, --usage=    int     1           set usage
  -c=, --cmdline=  string  "bad name"  set cmdline
  -g=, --getopt=   string  "ho"        set getopt
====================================
Usage:  This is a multiple-dispatch cmd.  Usage is like
  FullyAutoMulti subcommand [subcommand-opts & args]
where subcommand syntaxes are as follows:

  demo [optional-params] [files]
    demo entry point with varied, meaningless parameters.
    Options(opt-arg sep :|=|spc):
      --help, -?                    print this help message
      -a=, --alpha=  int     1      set alpha
      -b=, --beta=   float   2.0    set beta
      -v, --verb     toggle  false  on=chatty, off=quiet
      -i=, --item=   string  ""     set item
  
  show [optional-params] [paths]
    show entry point with varied, meaningless parameters.
    Options(opt-arg sep :|=|spc):
      --help, -?                    print this help message
      -z=, --gamma=  int     1      set gamma
      -i=, --iota=   float   2.0    set iota
      -v, --verb     toggle  false  set verb
